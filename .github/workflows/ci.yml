name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Python syntax check
        run: |
          python -m py_compile app.py
          echo "✅ Python syntax is valid"
      
      - name: Test Flask app
        run: |
          python -c "from app import app; print('✅ Flask app imports successfully')"
      
      - name: Check for basic security issues
        run: |
          if grep -r -i "password\|secret\|key\|token" app.py | grep -v "API_KEY" | grep -v "X-API-Key"; then
            echo "⚠️  Potential hardcoded secrets found"
          else
            echo "✅ No obvious hardcoded secrets found"
          fi

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: docker-template-manager:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker run --rm docker-template-manager:test python -c "from app import app; print('✅ Docker image works')"
      
      - name: Check required files in container
        run: |
          docker run --rm docker-template-manager:test test -f /app/app.py
          docker run --rm docker-template-manager:test test -f /app/static/index.html
          docker run --rm docker-template-manager:test test -d /app/static
          echo "✅ All required files present in container"

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
